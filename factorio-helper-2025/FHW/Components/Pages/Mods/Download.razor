@inject IToastService ToastService
@inject NavigationManager NavigationManager
@using System.Text.RegularExpressions

<div class="p-3">
    <div class="card">
        <div class="card-header text-center">
            <h1>Поиск и скачивание модов</h1>
            <p>Последнее общее обновление (UTC): @Data.Temp.Mods.LastUpdated.UtcDateTime.ToString("HH:mm:ss dd.MM.yyyy")</p>
            <p>Последнее локальное обновление (UTC): @_lastUpdated.UtcDateTime.ToString("HH:mm:ss dd.MM.yyyy")</p>
            <p>Интервал общих обновлений: 12 часов</p>
            <p>Интервал локальных обновлений: 5 минут, если нет ошибок</p>
        </div>
        <div class="card-body">
            <div class="p-3">
                @if (SelectedMod != null && SelectedModInfo != null)
                {
                    <div class="row mt-1">
                        <div class="col ms-2 p-0">
                            @* Search Box *@
                            <FluentSearch Style="width:100%" @bind-Value="_searchValue"
                                          @bind-Value:after="OnSearch"
                                          Immediate="true"
                                          ImmediateDelay="550"
                                          Placeholder="Начните вводить имя мода"/>
                        </div>
                        <div class="col-auto ms-2 p-0">
                            <FluentMenuButton Class="col"
                                              @ref=_versionButton
                                              ButtonAppearance="@Appearance.Outline"
                                              Text="@SelectedVersionTitle"
                                              Items="@SelectedModInfo?.Releases.Reverse().Select(x => x.Version).ToDictionary(x => x, x => x)"
                                              OnMenuChanged="x => { SelectedVersion = x.Value; }">
                            </FluentMenuButton>
                        </div>

                        @if (!String.IsNullOrWhiteSpace(SelectedVersion))
                        {
                            <div class="col-auto ms-2 me-3 p-0">
                                <FluentButton Appearance="Appearance.Accent" @onclick="DownloadMod">Скачать мод</FluentButton>
                            </div>
                        }
                    </div>
                    @if (_searchResults.Count > 0)
                    {
                        @* Search Results *@
                        <FluentListbox aria-label="search results"
                                       TOption="string"
                                       Items=@_searchResults
                                       SelectedOptionChanged="@(e => { _searchValue = (e != _defaultResultsText ? e : string.Empty); OnAutoCompleteChanged(Mods.ToList().Find(x => $"{x.Name} | {x.Title}" == _searchValue)); })"/>
                    }

                    <br/>
                    <div class="row">
                        <div class="col-md-8">
                            <h3>@SelectedMod?.Title</h3>
                            <br>
                            <dl class="row">
                                <dt class="col-sm-3">ID:</dt>
                                <dd class="col-sm-9" id="mod-info-name">@SelectedMod?.Name</dd>
                                <dt class="col-sm-3">Владелец:</dt>
                                <dd class="col-sm-9" id="mod-info-owner">@SelectedMod?.Owner</dd>
                                <dt class="col-sm-3">Категория:</dt>
                                <dd class="col-sm-9" id="mod-info-category">@SelectedMod?.Category</dd>
                                <dt class="col-sm-3">Описание:</dt>
                                <dd class="col-sm-9" id="mod-info-summary">@SelectedMod?.Summary</dd>
                                <dt class="col-sm-3">Загрузок:</dt>
                                <dd class="col-sm-9" id="mod-info-downloads">@SelectedMod?.DownloadsCount</dd>
                                <dt class="col-sm-3">Factorio:</dt>
                                <dd class="col-sm-9" id="mod-info-downloads">@BaseDependency</dd>
                                <dt class="col-sm-3">Актуальная версия:</dt>
                                <dd class="col-sm-9" id="mod-info-downloads">@SelectedMod?.LatestRelease.Version</dd>
                            </dl>
                            <br>
                            @if (!String.IsNullOrWhiteSpace(SelectedVersion))
                            {
                                <dl class="row">
                                    @if (MainDependencies.Count > 0)
                                    {
                                        <dt class="col-sm-3" id="mod-info-required-dependencies-header">
                                            Требуемые зависимости:
                                        </dt>
                                        <dd class="col-sm-9" id="mod-info-required-dependencies">
                                            <ul>
                                                @foreach (var dep in MainDependencies)
                                                {
                                                    <li>
                                                        <a class="text-success" @onclick="() => FindModByName(dep.Name, dep.Version)">@dep.Name @dep.Requirements @dep.Version</a>
                                                    </li>
                                                }
                                            </ul>
                                        </dd>
                                    }
                                    @if (AdditionalDependencies.Count > 0)
                                    {
                                        <dt class="col-sm-3" id="mod-info-optional-dependencies-header">
                                            Опциональные зависимости:
                                        </dt>
                                        <dd class="col-sm-9" id="mod-info-optional-dependencies">
                                            <ul>
                                                @foreach (var dep in AdditionalDependencies)
                                                {
                                                    <li>
                                                        <a class="text-warning" @onclick="() => FindModByName(dep.Name, dep.Version)">@dep.Name @dep.Requirements @dep.Version</a>
                                                    </li>
                                                }
                                            </ul>
                                        </dd>
                                    }
                                    @if (BadDependencies.Count > 0)
                                    {
                                        <dt class="col-sm-3" id="mod-info-incompatible-dependencies-header">
                                            Несовместимые моды:
                                        </dt>
                                        <dd class="col-sm-9" id="mod-info-incompatible-dependencies">
                                            <ul>
                                                @foreach (var dep in BadDependencies)
                                                {
                                                    <li>
                                                        <a class="text-danger" @onclick="() => FindModByName(dep.Name)">@dep.Name @dep.Requirements @dep.Version</a>
                                                    </li>
                                                }
                                            </ul>
                                        </dd>
                                    }
                                </dl>
                            }
                        </div>
                        <div class="col-md-4 p-3 text-center">
                            @if (!String.IsNullOrWhiteSpace(SelectedVersion) && !String.IsNullOrWhiteSpace(SelectedModInfo.Thumbnail) && false)
                            {
                                <div class="float-end">
                                    <img class="rounded-4" src="@($"https://assets-mod.factorio.com{SelectedModInfo.Thumbnail}")" style="width: 200px; height:200px" alt=""/>
                                </div>
                            }
                            else
                            {
                                <div class="float-end">
                                    <FluentEmoji Value="@(new Emojis.Objects.Flat.Default.Gear())" Width="200px" />
                                </div>
                            }
                        </div>

                    </div>
                }
                else
                {
                    <div class="row">
                        @if (Mods is null || (Mods != null && Mods.Count() == 0))
                        {
                            <h1>Идет загрузка списка модов... Пожалуйста, подождите!</h1>
                        }
                        else
                        {
                            <div class="m-0 p-0">
                                @* Search Box *@
                                <FluentSearch style="width: 100%;" @bind-Value="_searchValue"
                                              @bind-Value:after="OnSearch"
                                              Immediate="true"
                                              ImmediateDelay="600"
                                              Placeholder="Начните вводить имя мода"/>
                                @if (_searchResults.Count > 0)
                                {
                                    @* Search Results *@
                                    <FluentListbox aria-label="search results"
                                                   TOption="string"
                                                   Items=@_searchResults
                                                   SelectedOptionChanged="@(e => { _searchValue = (e != _defaultResultsText ? e : string.Empty); OnAutoCompleteChanged(Mods.ToList().Find(x => $"{x.Name} | {x.Title}" == _searchValue)); })"/>
                                }
                            </div>
                        }
                    </div>
                }

            </div>
        </div>
    </div>
</div>


@code {
    bool _isUpdating = false;
    DateTimeOffset _lastUpdated = DateTimeOffset.MinValue;
    private static Timer? WatchDog { get; set; }
    private FluentMenuButton _versionButton = new();

    protected override void OnAfterRender(bool firstRender)
    {
        WatchDog = new(new TimerCallback(_ =>
        {
            if (!_isUpdating && !Data.Temp.Mods.ModsLoad)
            {
                _isUpdating = true;
                if (DateTimeOffset.Now - _lastUpdated > TimeSpan.FromMinutes(5))
                {
                    Mods = GetMods();
                    if (Mods is null || (Mods != null && Mods.Count() == 0)) _lastUpdated = DateTimeOffset.MinValue;
                    _lastUpdated = DateTimeOffset.Now;
                    _searchResults = DefaultResults();
                    InvokeAsync(StateHasChanged);
                }

                _isUpdating = false;
            }
        }), null, 0, 1000);
        base.OnAfterRender(firstRender);
    }

    public IEnumerable<ModsList.Result>? Mods { get; set; }

    private string? _searchValue;
    private static string _defaultResultsText = "Что-то пошло не так...";
    private List<string> _searchResults = new List<string>{"Идет загрузка или что-то пошло не так...", "Попробуйте ввести что-то в поиск"};
    public string BaseDependency { get; set; } = "";
    public List<Mod.Dependency> MainDependencies { get; set; } = new List<Mod.Dependency>();
    public List<Mod.Dependency> AdditionalDependencies { get; set; } = new List<Mod.Dependency>();
    public List<Mod.Dependency> BadDependencies { get; set; } = new List<Mod.Dependency>();


    private List<string> DefaultResults() => Mods == null ? new List<string> { "Моды не были загружены" } :
        Mods.OrderBy(x => x.DownloadsCount)
            .ToList()
            .GetRange(0, 5)
            .Select(str => $"{str.Name} | {str.Title}")
        .ToList();

    private ModsList.Result? _selectedMod;

    public ModsList.Result? SelectedMod
    {
        get { return _selectedMod; }
        set
        {
            _selectedMod = value;
            SelectedVersion = "";
            ClearDependencies();
        }
    }

    public ModObj.Mod? SelectedModInfo { get; set; }

    private string _selectedVersion = "";

    private string SelectedVersionTitle
    {
        get { return String.IsNullOrWhiteSpace(_selectedVersion) ? "Выберите версию" : _selectedVersion; }
    }

    public string SelectedVersion
    {
        get { return _selectedVersion; }
        set
        {
            if (!String.IsNullOrWhiteSpace(value))
            {
                ClearDependencies();
                var mod = SelectedModInfo.Releases.ToList().Find(x => x.Version == value);
                if (mod is null)
                {
                    mod = SelectedModInfo.Releases.ToList().Last();
                    value = mod.Version;
                }

                foreach (var dep in mod.InfoJson.Dependencies)
                {
                    string pattern = @"^((?:)|(?:\?)|(?:\(\?\))|(?:!)|(?:~))(?:\s?)([%\w\s-]+)(?:\s{0,})(?:((?:=>)|(?:==)|(?:=)|(?:<=)|(?:>=)|(?:<)|(?:>)|(?:))(?:\s{0,})((\d+\.\d+\.\d+)|(\d+\.\d+)))?$";
                    Match m = Regex.Match(dep, pattern, RegexOptions.IgnoreCase);
                    switch (m.Groups[2].Value.Trim())
                    {
                        case "base":
                            BaseDependency = m.Groups[4].Value;
                            break;
                        default:
                            Mod.Dependency dependency = new Mod.Dependency { Name = m.Groups[2].Value.Trim(), Requirements = m.Groups[3].Value.Trim(), Version = m.Groups[4].Value.Trim() };
                            switch (m.Groups[1].Value)
                            {
                                case "":
                                    MainDependencies.Add(dependency);
                                    break;
                                case "(?)":
                                case "?":
                                    AdditionalDependencies.Add(dependency);
                                    break;
                                case "!":
                                    BadDependencies.Add(dependency);
                                    break;
                            }

                            break;
                    }
                }
            }

            _selectedVersion = value;
        }
    }


    private void OnSearch()
    {
        if (!string.IsNullOrWhiteSpace(_searchValue))
        {
            var results = Mods.Where(mod => mod.Name.Contains(_searchValue, StringComparison.OrdinalIgnoreCase)
                                            || mod.Title.Contains(_searchValue, StringComparison.OrdinalIgnoreCase))
                .Select(str => $"{str.Name} | {str.Title}")
                .ToList();
            if (results.Count > 20) results = results.GetRange(0, 20).ToList();
            _searchResults = results.Any() ? results : DefaultResults();
        }
        else
        {
            _searchResults = DefaultResults();
        }
    }

    private IEnumerable<ModsList.Result> GetMods()
    {
        if (!Data.Temp.Mods.ModsLoad) return Data.Temp.Mods.MainModsList.ToList().OrderByDescending(mod => mod.DownloadsCount);
        else return new List<ModsList.Result>();
    }

    private void OnAutoCompleteChanged(ModsList.Result mod, bool selectVersion = true)
    {
        if (mod != null)
        {
            SelectedModInfo = null;
            if (!Data.Temp.Mods.LastUpdateMods.ContainsKey(mod.Name))
            {
                Data.Temp.Mods.LastUpdateMods.Add(mod.Name,
                    new Mod.Info
                    {
                        Mod = ModObj.Mod.FromJson(LMC.Web.GetString($"https://mods.factorio.com/api/mods/{mod.Name}/full")),
                        LastUpdate = ((DateTimeOffset)DateTime.Now).ToUnixTimeSeconds()
                    });
            }

            if (((DateTimeOffset)DateTime.Now).ToUnixTimeSeconds() - Data.Temp.Mods.LastUpdateMods[mod.Name].LastUpdate > 86400)
            {
                Data.Temp.Mods.LastUpdateMods[mod.Name].Mod = ModObj.Mod.FromJson(LMC.Web.GetString($"https://mods.factorio.com/api/mods/{mod.Name}/full"));
                Data.Temp.Mods.LastUpdateMods[mod.Name].LastUpdate = ((DateTimeOffset)DateTime.Now).ToUnixTimeSeconds();
            }

            SelectedModInfo = Data.Temp.Mods.LastUpdateMods[mod.Name].Mod;
            SelectedMod = mod;
            BaseDependency = mod.LatestRelease.InfoJson.FactorioVersion;
            if (selectVersion) SelectedVersion = SelectedMod.LatestRelease.Version;
            _searchResults.Clear();
        }
    }

    private void ClearDependencies()
    {
        MainDependencies.Clear();
        AdditionalDependencies.Clear();
        BadDependencies.Clear();
    }

    private void DownloadMod()
    {
/*FHW.Core.Downloader.AddQueue(new Core.Downloader.Download { Uri = $@"https://official-factorio-mirror.re146.dev/{selectedModInfo.Name}/{selectedVersion}.zip",
    FileName = $"{selectedModInfo.Name}_{selectedVersion}.zip",
    Title = $"Mod: {selectedModInfo.Name} {selectedVersion}" });*/
        NavigationManager.NavigateTo($@"https://official-factorio-mirror.re146.dev/{SelectedModInfo.Name}/{SelectedVersion}.zip");
    }

    private void FindModByName(string name, string? version = null)
    {
        var fMod = Mods.ToList().Find(x => x.Name == name);
        if (fMod != null)
        {
            if (String.IsNullOrWhiteSpace(version)) version = null;
            if (version != null) OnAutoCompleteChanged(fMod, false);
            else OnAutoCompleteChanged(fMod, true);
            if (version != null) SelectedVersion = version;
        }
        else
        {
            ToastService.ShowError("Мод не найден");
        }
    }

}