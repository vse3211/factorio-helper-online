<div class="p-3">
    <div class="card mb-3">
        <div class="card-header text-center">
            <h3>Доступные версии на Factorio.com</h3>
        </div>
        <div class="card-body">
            @if (Core.Game.Controller.AvailableVersions is null)
            {
                <FluentProgress></FluentProgress>
                <h1>Идет поиск доступных версий... Пожалуйста, подождите!</h1>
            }
            else
            {
                isVersionsLoaded = true;
                <ul>
                    <h3>Стабильные версии</h3>
                    <li>
                        Stable alpha: @Core.Game.Controller.AvailableVersions.Stable.Alpha
                    </li>
                    <li>
                        Stable expansion: @Core.Game.Controller.AvailableVersions.Stable.Expansion
                    </li>
                    <li>
                        Stable demo: @Core.Game.Controller.AvailableVersions.Stable.Demo
                    </li>
                    <li>
                        Stable headless: @Core.Game.Controller.AvailableVersions.Stable.Headless
                    </li>
                    <br />
                    <h3>Эксперементальные версии</h3>
                    <li>
                        Experimental alpha: @Core.Game.Controller.AvailableVersions.Experimental.Alpha
                    </li>
                    <li>
                        Experimental expansion: @Core.Game.Controller.AvailableVersions.Experimental.Expansion
                    </li>
                    <li>
                        Experimental demo: @Core.Game.Controller.AvailableVersions.Experimental.Demo
                    </li>
                    <li>
                        Experimental headless: @Core.Game.Controller.AvailableVersions.Experimental.Headless
                    </li>
                </ul>
                <br />
                <p><a href="https://factorio.com/download/sha256sums/" target="_blank">Список</a> хешей для проверки на
                подлинность</p>
            }
        </div>
    </div>
    <div class="card">
        <div class="card-header text-center">
            <h1>Скачать Factorio</h1>
            @if (Core.Game.Controller.isInstalationInProgress)
            {
                <FluentProgress Min="0" Max="100" Value="Core.Game.Controller.downloadingProgress"></FluentProgress>
            }
        </div>
        <div class="card-body">
            Доступные файлы
            <ul>
                @try
                {
                    if (Directory.Exists(Directory.GetCurrentDirectory() + "/wwwroot/factorio"))
                    {
                        @foreach (var v in @Directory.GetFiles(Directory.GetCurrentDirectory() + "/wwwroot/factorio"))
                        {
                            <li>
                                <a href="./factorio/@Path.GetFileName(v)" target="_blank">@Path.GetFileName(v)</a>
                            </li>
                        }
                    }
                    else
                    {
                        <li>Папка не существует</li>
                    }
                }
                catch (Exception ex)
                {
                    Guid guid = Guid.NewGuid();
                    Console.WriteLine($"[{guid}]\n{ex}\n\n");
                    <li>
                        Произошла ошибка! Предоставьте администратору ID ошибки: @guid.ToString()
                    </li>
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private bool isVersionsLoaded = false;
    private DateTimeOffset LastCheck = DateTimeOffset.MinValue;
    public static Timer? WatchDog { get; private set; }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            WatchDog = new(new TimerCallback(async _ =>
            {
                await InvokeAsync(() =>
                {
                    if (isVersionsLoaded && DateTimeOffset.Now - LastCheck > TimeSpan.FromSeconds(1))
                    {
                        StateHasChanged();
                        LastCheck = DateTimeOffset.Now;
                    }
                });
            }), null, 0, 1000);
        }

    }
}